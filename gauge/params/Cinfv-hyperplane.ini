# Simulation of the AFM Heisenberg model on a cubic lattice
#
# The associated order parameter is the staggered magnetization vector, hence
# a rank-1 order parameter. Only one "color" vector per site is needed to
# describe the orientation, but the staggered nature requires the use of a
# two-spin cluster ("bipartite").
#
# The critical temperature for this transition is T_c = 1.44 assuming J_1 = 0
# and J_3 = -1. When tuning the couplings (at constant temperature T = 1)
# instead, this translates into a critical coupling of J_3 = -0.694.
# The "hyperplane" classifier is used to classify samples as "ORDERED" or
# "DISORDERED" relative to this critical coupling.
#
# 50 different J_3 couplings are drawn uniformly from the interval [-1.5, 0]
# using the sweep policy "uniform_line".
# 100 samples of the spin configuration are taken per coupling.
#
# Build options:
#     GAUGE_CLASSIFIER    HYPERPLANE
#
# $ gauge-learn Cinfv.ini                                       (approx. 6 mins)
#     runs the simulation, collects samples and saves those to Cinfv.clone.h5,
#     performs the SVM optimization, and stores the optimization result in
#     Cinfv.out.h5
#
# $ gauge-coeffs Cinfv.out.h5 -u
#     extracts the coefficient matrix describing the staggered magnetization
#     for the single transition between samples from the ORDERED and DISORDERED
#     phases
#
# $ gauge-test Cinfv.out.h5                                     (approx. 3 mins)
#     runs the MC simulation at 28 points along the line from J_3=-1.5 to J_3=0,
#     measuring the SVM decision function as an observable.
#     The results are written to Cinfv.test.txt; the decision function can be
#     plotted using
#
#     gnuplot> plot 'Cinfv.test.txt' u 2:5:6 w yerrorlines

# Simulation runtime
total_sweeps = 2000
thermalization_sweeps = 1000

# Gauge model
length = 12
gauge_group = "Cinfv"
group_size = 1
O3 = 1
sweep_unit = 10

# SVM kernel and optimization
rank = 1
symmetrized = 1
color = "mono"
cluster = "bipartite"
nu = 0.5

# Classifier
[classifier.hyperplane.support]
J1 = 0
J3 = -0.694
[classifier.hyperplane.normal]
J1 = 0
J3 = -1

# Sweep policy
[sweep]
policy = "uniform_line"
N = 50
samples = 100
[sweep.uniform_line.a]
J1 = 0
J3 = 0.0
[sweep.uniform_line.b]
J1 = 0
J3 = -1.5

# Testing stage
[test]
N_scan = 28
[test.a]
J1 = 0
J3 = 0.0
[test.b]
J1 = 0
J3 = -1.5
