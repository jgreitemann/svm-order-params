# Simulation of the gauge model with D2h symmetry
#
# The phase diagram features three phases:
# O(3) (disordered), Dinfh (uniaxial), and D2h (biaxial).
# The transitions from the disordered to the uniaxial phase, as well as the
# subsequent transition from the uniaxial to the biaxial phase are described
# by rank-2 (quadrupolar) order parameters. There is also a regime where both
# transitions happen at the same time; in this case, the SVM will learn a super-
# position of both order parameters.
# All three colors per site are considered, and a single-site cluster is used.
#
# The machine is trained at 100 points which cover the relevant area of the
# phase diagram in a 10 x 10 regular grid using the the "grid" sweep policy.
# At each point in the phase diagram, 100 spin configurations are sampled.
#
# The samples are consequently labeled "0" through "99", according to their
# grid point using the "fixed_from_grid" classifier. Unlike the simulation in
# the `params/D2h` directory, this one does not assume any prior knowledge of
# the phase diagram.
#
# This results in a multiclassification problem with 100 distinct labels and
# 4950 transitions between labels. Obviously, many of these will be either
# redundant (because, in principle, any two points from the same two phases
# should learn the same order) or not physical (transitions between point within
# the same phase). Additionally, the sample size for each individual point is
# rather small. Instead, this kind of approach is intended to explore the
# previously unknown phase diagram by exploiting the bias criterion using the
# graph analysis.
#
# Build options:
#     GAUGE_CLASSIFIER    GRID
#
# $ gauge-learn D2h.ini                                        (approx. 35 mins)
#     runs the simulation, collects samples and saves those to D2h.clone.h5,
#     performs the SVM optimization, and stores the optimization result in
#     D2h.out.h5
#
#     Alternatively, rather than sampling anew, one can recycle the samples of
#     the simulation in the `params/D2h` directory and reclassify them
#     according to grid points:
#
#     $ ln -s ../D2h/D2h.clone.h5
#     $ gauge-learn D2h.clone.h5 --skip-sampling --nu=0.1        (approx. 1 min)
#
# $ gauge-segregate-phases D2h.out --rhoc=1.6
#     performs the graph analysis. The graph is constructed by included an edge
#     in the graph if the bias of the corresponding decision function exceeds
#     the threshold value rho_c specified by the command line argument. The
#     program constructs the Laplacian matrix of the graph and calculates its
#     spectral decomposition. We advise to choose rho_c such that any higher
#     value would result in a disconnected graph (i.e. a degeneracy of the
#     eigenvalue zero of the Laplacian). For the parameters (and seed) chosen
#     here, this happens to be the case for rho_c ~ 1.6.
#
#     To visualize the resulting graph:
#
#     gnuplot> plot 'edges.txt' using 2:1 with lines
#
#     To visualize the Fiedler vector (eigenvector of the lowest non-zero
#     eigenvalue) whose entries indicate which phase the corresponding vertex
#     belongs to:
#
#     gnuplot> plot 'phases.txt' i 1 u 2:1:3 with points pt 7 ps 2 lc palette

# Simulation runtime
total_sweeps = 5000
thermalization_sweeps = 1000

# Gauge model
length = 12
gauge_group = "D2h"
group_size = 8
O3 = 1
sweep_unit = 10

# SVM kernel and optimization
rank = 2
symmetrized = 1
color = "triad"
cluster = "single"
nu = 0.1

# Sweep policy
[sweep]
policy = "grid"
samples = 100
N = 100
[sweep.grid]
N1 = 10
N2 = 10
[sweep.grid.a]
J1 = 0.
J3 = 0.
[sweep.grid.b]
J1 = 3.
J3 = 3.
