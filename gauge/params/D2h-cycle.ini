# Simulation of the gauge model with D2h symmetry
#
# The phase diagram features three phases:
# O(3) (disordered), Dinfh (uniaxial), and D2h (biaxial).
# The transitions from the disordered to the uniaxial phase, as well as the
# subsequent transition from the uniaxial to the biaxial phase are described
# by rank-2 (quadrupolar) order parameters. There is also a regime where both
# transitions happen at the same time; in this case, the SVM will learn a super-
# position of both order parameters.
# All three colors per site are considered, and a single-site cluster is used.
#
# The machine is trained at four points corresponding to the corners of the
# phase diagram, using the "cycle" sweep policy.
# The samples are consequently labeled "P1" through "P4" according to which of
# the two points they were sampled at using the "fixed_from_sweep" classifier.
#
# This results in a multiclassification problem with four distinct labels and
# six transitions between labels. Since in fact the points P3 and P4 are both
# in the D2h phase, the transition between these two does not correspond to a
# physical transition. This manifests itself in a bias value rho much different
# from one and a noisy coefficient matrix.
#
# $ mpirun -n 4 gauge-sample D2h-cycle.ini                     (approx. 23 mins)
#     runs the simulation, collects samples and saves those to
#     D2h-cycle.clone.h5.
#
# $ gauge-learn D2h-cycle.clone.h5
#     classifies the samples according to the points P1 through P4 they have
#     been sampled from and performs the SVM optimization with respect to that,
#     storing the optimization result in D2h-cycle.out.h5.
#
# $ gauge-coeffs D2h-cycle.out.h5 -u
#     extracts the coefficient matrices corresponding to each of the six
#     transitions. The P1-P2 transition corresponds to the uniaxial order, both
#     the P2-P3 and P2-P4 transitions to the biaxial order, while both the P1-P3
#     and P1-P4 transitions are (different) superpositions of the former two.
#     Finally, the P3-P4 transition does not correspond to a physical order
#     parameter. It does learn some finite-size effects but the "zero" elements
#     of the pattern are much more noisy.

# Simulation runtime
total_sweeps = 100000
thermalization_sweeps = 10000

# Gauge model
length = 12
gauge_group = "D2h"
group_size = 8
O3 = 1
sweep_unit = 10

# SVM kernel and optimization
rank = 2
symmetrized = 1
color = "triad"
cluster = "single"
nu = 0.1

# Classifier
[classifier]
policy = "fixed_from_sweep"

# Sweep policy
[sweep]
policy = "cycle"
samples = 2000
[sweep.cycle.P1]
J1 = 0.
J3 = 0.
[sweep.cycle.P2]
J1 = 0.
J3 = 3.
[sweep.cycle.P3]
J1 = 3.
J3 = 0.
[sweep.cycle.P4]
J1 = 3.
J3 = 3.
